<style lang="less">
  @import './style/index.less';
  page {
    background: @bgColor;
  }
</style>

<script>
  import wepy from 'wepy'
  import 'wepy-async-function'
  import config from './config'

  export default class extends wepy.app {
    config = {
      pages: [
        'pages/index',
        'pages/search',
        'pages/detail',
        'pages/board',
        'pages/web-view',
        'pages/routes'
      ],
      window: {
        navigationStyle: 'custom',
        backgroundTextStyle: 'light',
        navigationBarBackgroundColor: '#8BCEFF',
        navigationBarTitleText: '南苑寻游'
      },
      plugins: {
        'myPlugin': {
          'version': '1.0.6',
          'provider': 'wx5bc2ac602a747594'
        }
      },
      permission: {
        'scope.userLocation': {
          desc: '您的位置信息将用于小程序位置接口的效果展示'
        }
      }
    }

    globalData = {
      currentPosition: null,
      menuButtonBounding: null,
      config: config,
      markers: null
    }

    constructor() {
      super()
      this.use('requestfix')
      this.use('promisify')
    }

    onLaunch() {
      // 打开调试
      wx.setEnableDebug({
        enableDebug: true
      })
      wx.cloud.init({
        env: 'enanyuan-6db383',
        traceUser: true
      })
    }

    loadMarkers() {
      let markers = wx.getStorageSync('markers')
      return new Promise(resolve => {
        const db = wx.cloud.database()
        if (!markers) {
          db.collection('markers')
            .get()
            .then(res => {
              this.globalData.markers = res.data
              resolve(res.data)
            })
          wx.setStorage({
            key: 'markers',
            data: markers
          })
        } else {
          resolve(markers)
        }
      })
    }

    clearMarkers(markers) {
      return new Promise(resolve => {
        let num = 0
        for (const i of markers) {
          for (const j of i.data) {
            j.id = num
            num += 1
            j.iconPath = `/img/icons/markers/${i.icon}.png`
            j.width = config.markerStyle.width
            j.height = config.markerStyle.height
            j.callout = Object.assign({ content: j.short_name ? j.short_name : j.name }, config.markerStyle.calloutStyle)
            // if (j.time) { j.fullTime = format2FullTime(j.time) }
          }
        }
        resolve(markers)
      })
    }
  }
</script>
