<style lang="less">
  @import "../style/base.less";

  @padding: 20rpx;

  /* SIDE MENU */
  @menuButtonSize: 80rpx;
  @menuButtonMarginTop: 12rpx;

  .side-menu {
    position:absolute;
    right: @padding;
    .menu-item {
      margin-top: @menuButtonMarginTop;
      width:@menuButtonSize;
      height:@menuButtonSize;
      transform: scale(1);
      transition: @toggle;
      &.selected {
        transform: scale(1.1);
      }
    }
  }

  /* PICKER */
  @catSize: 80rpx;
  .picker {
    position:absolute;
    max-height: @catSize * 6 - (@catSize/2);
    overflow-y: scroll;
    width: @catSize + @padding;
    right: @padding / 2;
    margin-top: @catSize * 4 + @menuButtonMarginTop * 4;
    transform: translateX(@catSize + @padding);
    opacity: 0;
    background:rgba(255,255,255,.6);
    border-radius: 4px;
    transition: @toggle;
    &.show {
      transform: translateX(0px);
      opacity: 1;
    }
    .option {
      height:@catSize;
      line-height:@catSize;
      font-size:12px;
      text-align:center;
      transition:background .3s ease;
      &.selected {
        background: @themeColor;
        color: #fff;
      }
    }
  }

  /* DANMAKU */
  .danmaku {
    overflow:hidden;
    position:absolute;
    right: 20rpx;
    top:160rpx;
    height:82rpx;
    width:95%;
    background:rgba(0,0,0,.1);
    border-radius:26px;
    box-sizing:border-box;
    line-height:80rpx;
    font-size:32rpx;
    padding:0 12px;
    opacity: 0;
    transform: translate(100vw);
    transition: transform .8s ease, opacity 3s ease;
    .dm {
      text-overflow:ellipsis;
      padding-right: 80rpx;
      transition: all 16s linear;
      text-align:center;
      line-height:inherit;
    }
    &.show {
      opacity: 1;
      transform: translate(0);
    }
  }

  /* FAB */
  @FABsize: 200rpx;
  .pan {
    position: absolute;
    width: @FABsize * 2;
    height: @FABsize * 2;
    left: 50%;
    margin-left: -@FABsize;
    background: rgba(0,0,0,.1);
    border-radius: 50%;
    transform: scale(0);
    opacity: 0;
    transition: @toggle;
    &.active {
      transform: scale(1);
      opacity: 1;
    }
  }

  .pan, .menu-item-wrapper {
    bottom: 0;
  }

  .btn-go {
    position:absolute;
    width: @FABsize;
    height: @FABsize;
    z-index:100;
    left: 50%;
    bottom: @FABsize / 2;
    margin-left: -@FABsize / 2;
  }

  .menu-item-wrapper {
    position:absolute;
    width: @FABsize * 2;
    height: @FABsize * 2;
    border-radius:50%;
    left: 50%;
    margin-left: -@FABsize;
    z-index: 100;
    &.active {
      .menu-item {
        transform: scale(1);
        opacity: 1;
        &.first {
          transform: translate(-50%, 0);
        }
        &.second {
          transform: translate(0, -50%);
        }
        &.third {
          transform: translate(-50%, 0);
        }
        &.four {
          transform: translate(0, -50%);
        }
      }
    }

    .menu-item {
      position:absolute;
      width: @FABsize / 2.5;
      height: @FABsize / 2.5;
      border-radius:50%;
      text-align:center;
      line-height: @FABsize / 2.5;
      transform: scale(0);
      opacity: 0;
      transition: @toggle;
      z-index: 100;
      background:#fff;
      &.first {
        top: @FABsize / 10;
        left: 50%;
        transform: translate(-50%, @FABsize/2);
      }
      &.second {
        top: 50%;
        right: @FABsize / 10;
        transform: translate(-@FABsize/2, -50%);
      }
      &.third {
        bottom:@FABsize / 10;
        left: 50%;
        transform: translate(-50%, -@FABsize/2);
      }
      &.four {
        top: 50%;
        left: @FABsize / 10;
        transform: translate(@FABsize/2, -50%);
      }
    }
  }

  /* SIDE BTN */
  .search, .location {
    position: absolute;
    width: 42px;
    height: 42px;
    transition: @toggle;
    bottom: @FABsize * .8;
  }
  .search {
    right: @FABsize * .8;
    &.active {
      transform:translateX(@FABsize/2);
    }
  }
  .location {
    left: @FABsize * .8;
    &.active {
      transform:translateX(-@FABsize/2);
    }
    &.corner {
      transform: translate(-120rpx, 120rpx);
    }
  }


  .route-wrapper {
    position: relative;
    padding: 20rpx;
    box-sizing: border-box;
    .btn-close {
      font-size:18px;
      position: absolute;
      right: 20rpx;
      top: 20rpx;
    }
    .title {
      margin-bottom:10rpx;
      font-size:24px;
    }
    .desc {
      font-size:14px;
      color:rgba(0,0,0,.5);
    }
  }
  .route {
    margin:40rpx 0;
    .points {
      overflow-x:scroll;
      align-items:center;
      position: relative;
      z-index: 100;
      .end {
        width:2px;
        height:100%;
        background:tomato;
        position:absolute;
        right:0;
      }
    }
    .line {
      width:100%;
      height:2px;
      background:#aaa;
      position:absolute;
      top:30rpx;
      z-index:99;
      border-left:50rpx solid #0091ff;
      border-right:50rpx solid #CB4042;

    }
    .point {
      width: 160rpx;
      display:inline-flex;
      flex-direction: column;
      box-sizing:border-box;
      font-size: 12px;
      align-items:center;
      text {
        padding-top:10rpx;
      }
      image {
        width: 64rpx;
        height: 64rpx;
      }
    }
  }
</style>

<template>
  <view>
    <map
        id="map"
        longitude="{{longitude}}"
         latitude="{{latitude}}"
         scale="{{scale}}"
        skew="{{skew}}"
        rotate="{{rotate}}"
         markers="{{routeData || _markers}}"
         polyline="{{toggleRoutes ? route : ''}}"
         polygons="{{polygons[0].points ? polygons : ''}}"
         circles="{{toggleRoutes ? circles : ''}}"
         @markertap="markerTap"
         show-location="{{true}}"
          enable-rotate="{{true}}"
         enable-overlooking="{{ true }}"
         enable-3D="{{ true }}"
         style="width: 100%; height:{{toggleRoutes ? '75vh' : '100vh'}};}}"
    >

      <!-- DANMAKU -->
      <cover-view class="danmaku {{danmuShow ? 'show' : ''}}"  style="{{toggleRoutes ? 'display: none' : ''}}">
        <cover-view class="dm">{{comments[danmuCounter].content}}</cover-view>
      </cover-view>

      <!-- SIDE MENU -->
      <cover-view
        class="side-menu"
        wx:if="{{!toggleRoutes}}"
        style="top: {{menuButtonBounding.height + menuButtonBounding.top}}px"
      >
        <cover-image @tap="navigateComment" class="menu-item" src="/img/ico/comment.png"></cover-image>
        <cover-image @tap="navigateAbout" class="menu-item" src="/img/ico/nfsysu.png"></cover-image>
        <cover-image @tap="navigatePanorama" class="menu-item" src="/img/ico/panorama.png"></cover-image>
        <cover-image @tap="toggleCats" class="menu-item {{showCats ? 'selected' : ''}}" src="/img/ico/park.png"></cover-image>
      </cover-view>

      <!-- Cats Picker -->
      <cover-view
        class="picker {{showCats ? 'show' : ''}}"
        style="top: {{menuButtonBounding.height + menuButtonBounding.top}}px"
        @tap="selectCat"
      >
        <cover-view
          wx:for="{{__markers}}"
          wx:key="{{index}}"
          data-id="{{index}}"
          class="option {{catIndex === index ? 'selected' : ''}}"
        >
          {{item.type}}
        </cover-view>
      </cover-view>

      <!-- FAB -->
      <cover-view
        wx:if="{{!toggleRoutes}}"
        class="pan {{showDeck ? 'active' : ''}}"
      ></cover-view>

      <cover-view
        wx:if="{{!toggleRoutes}}"
        class="menu-item-wrapper {{showDeck ? 'active' : ''}}"
        @tap="selectRoute"
      >
        <cover-view class="menu-item first" data-id="m">中</cover-view>
        <cover-view class="menu-item second" data-id="e">东</cover-view>
        <cover-view class="menu-item third" data-id="s">南</cover-view>
        <cover-view class="menu-item four" data-id="w">西</cover-view>
      </cover-view>

      <cover-image
        wx:if="{{!toggleRoutes}}"
        class="btn-go"
        @tap="you"
        src="/img/ico/btn-go.png"
      ></cover-image>

        <cover-image
          class="location {{showDeck ? 'active' : ''}} {{toggleRoutes ? 'corner' : ''}}"
          @tap="locate"
          src="/img/ico/target.png"
        ></cover-image>

        <cover-image
          wx:if="{{!toggleRoutes}}"
          class="search {{showDeck ? 'active' : ''}}"
          @tap="navigateSearch"
          src="/img/ico/search.png"
        ></cover-image>
    </map>

    <!-- ROUTES -->
    <view
      class="route-wrapper"
      style="height: 25vh;width:100%;"
      wx:if="{{toggleRoutes}}"
    >
      <view class="title">{{routes[route[0].id].name}}</view>
      <view class="desc">共有{{routes[route[0].id].count}}个景点</view>
      <i class="icon-close iconfont btn-close" @tap="closeRoutes"></i>
      <scroll-view class="route {{showPicker ? 'show' : ''}}" scroll-x>
        <view
          class="points"
          style="width:{{_markers.length * 160 < windowWidth ? windowWidth : _markers.length * 160}}rpx;"
        >
          <view
            wx:for="{{_markers}}"
            wx:key="{{index}}"
            data-id="{{index}}"
            class="point {{item.selected ? 'selected' : ''}}"
            @tap="focusPoint"
            wx:if="{{item.name}}"
          >
            <image src="{{item.iconPath}}" wx:if="{{item.iconPath}}"></image>
            <text>{{item.name}}</text>
          </view>
        </view>
        <view class="line" style="width:{{_markers.length * 140}}rpx"></view>
      </scroll-view>
    </view>

  </view>
</template>

<script>
  import wepy from 'wepy'
  import routes from '../mock/routes'
  import config from '../config'

  export default class Index extends wepy.page {
    config = {
      disableScroll: true
    }

    data = {
      menuButtonBounding: null,
      config: null,
      _markers: null,
      __markers: null,
      catIndex: 0,
      // ————————— Map —————————————
      mapContext: null,
      scale: 16,
      skew: 0,
      rotate: 0,
      latitude: 23.632674,
      longitude: 113.679404,
      // ——————————————————————————
      showCats: true,
      showDeck: false,
      toggleRoutes: false,
      routes: routes,
      route: [{
        points: [],
        ...config.markerStyle.polylineStyle
      }],
      circles: [{
        radius: 10,
        ...config.markerStyle.circleStyle
      }]
    }

    watch = {
      showDeck(newValue, oldValue) {
        this.showCats = !newValue
        this.$apply()
      }
    }

    computed = {
      windowWidth() {
        return wx.getSystemInfoSync().screenWidth
      }
    }

    methods = {
      selectCat(e) {
        const targetId = e.target.dataset.id
        if (this.catIndex !== targetId) {
          this.catIndex = targetId
          this._markers = this.__markers[this.catIndex].data
          this.includePoints(100)
        }
      },
      locate() {
        this.mapContext.moveToLocation()
      },
      markerTap(e) {
        wx.navigateTo({
          url: `./detail?index=${this.catIndex}&id=${e.markerId}`
        })
      },
      toggleCats() {
        this.showCats = !this.showCats
      },
      you() {
        this.showDeck = !this.showDeck
      },
      selectRoute(e) {
        if (!e.target.dataset.id) return
        this.toggleRoutes = true
        let rid
        switch (e.target.dataset.id) {
          case 'm':
            rid = 0
            this.rotate = -140
            this.scale = 16
            this.skew = 40
            break
          case 'w':
            rid = 1
            this.rotate = -70
            this.scale = 16
            this.skew = 40
            break
          case 'e':
            rid = 2
            this.rotate = 90
            this.scale = 16
            this.skew = 40
            break
          case 's':
            rid = 3
            this.rotate = 0
            this.scale = 17
            this.skew = 40
            break
        }
        const route = this.routes[rid].data
        const circles = this.routes[rid].circles
        this.route[0].points = route
        this.route[0].id = rid
        this._markers = route.filter(m => m.name)
        this.latitude = this._markers[0].latitude
        this.longitude = this._markers[0].longitude
        if (circles) {
          for (const c of circles) {
            this.circles.push({
              ...c,
              ...config.markerStyle.circleStyle
            })
          }
        }
      },
      closeRoutes() {
        this.toggleRoutes = false
        this._markers = this.__markers[this.catIndex].data
        this.resetMapAngle()
      },
      focusPoint (e) {
        const targetMarker = this._markers[e.currentTarget.dataset.id]
        this.scale = 18
        this.latitude = targetMarker.latitude
        this.longitude = targetMarker.longitude
      }
    }

    includePoints(padding) {
      this.mapContext.includePoints({
        padding: [padding, padding, padding, padding],
        points: this._markers
      })
    }

    loadRoutes() {
      for (const route of this.routes) {
        let count = 0
        for (let point of route.data) {
          if (point.name) {
            count += 1
            for (const i of this.__markers) {
              for (const j of i.data) {
                if (j.name === point.name || j.short_name === point.name) {
                  point = Object.assign(point, j)
                }
              }
            }
          }
        }
        route.count = count
      }
    }

    resetMapAngle() {
      const self = this
      const ctx = this.mapContext
      // this.mapCenter = [this.school.latitude, this.school.longitude]
      // this.map.latitude =
      ctx.getScale({
        success(e) {
          self.scale = e.scale
          self.$apply()
        },
        complete() {
          self.scale = 15
          self.$apply()
        }
      })
      ctx.getSkew({
        success(e) {
          self.skew = e.skew
          self.$apply()
        },
        complete() {
          self.skew = 0
          self.$apply()
        }
      })
      ctx.getRotate({
        success(e) {
          self.rotate = e.rotate
          self.$apply()
        },
        complete() {
          self.rotate = 0
          self.$apply()
        }
      })
    }

    onLoad() {
      this.$parent.loadMarkers().then(res => {
        this.$parent.clearMarkers(res).then(res => {
          this._markers = res[this.catIndex].data
          this.__markers = this.$parent.globalData.markers
          this.loadRoutes()
          this.$apply()
        })
      })

      this.$parent.globalData.menuButtonBounding = wx.getMenuButtonBoundingClientRect()
      this.menuButtonBounding = this.$parent.globalData.menuButtonBounding
    }

    onReady() {
      this.mapContext = wx.createMapContext('map')
    }

    drawLine(e) {
      if (!e.target.id) return
      this.toggleRoutes = true
      this.active = false
      this.showPicker = false
      const points = []
      const routeData = []
      this.rid = e.target.id
      const route = this.routes[e.target.id]
      let num = 0
      this.routeScale = route.scale
      for (const point of route.data) {
        if (point.name) num += 1
        points.push(point)
      }
      let index = 0
      for (const i in points) {
        const point = points[i]
        if (point.name) {
          index += 1
          point.iconPath = '/img/ico/' + index + '.png'
          point.width = 22
          point.height = 22
          point.id = String(i)
          point.callout = {
            content: point.name,
            display: 'BYCLICK',
            borderColor: config.polylineStyle.color,
            borderWidth: 1
          }
          Object.assign(point.callout, config.calloutStyle)
          // point.label = {content: String(index)}
          // Object.assign(point.label, config.labelStyle)
          routeData.push(point)
        }
      }
      this.routeData = routeData
      this.polyline[0].points = points
      this.polyline[0].num = num
      this.polyline[0].id = e.target.id
      this.latitude = points[0].latitude
      this.longitude = points[0].longitude
    //  polygons，失效
      if (route.area) {
        this.polygons[0].points = route.area
      }
    //  circles
      if (route.circle) {
        this.circles[0].longitude = route.circle[0].longitude
        this.circles[0].latitude = route.circle[0].latitude
        this.circles[0].radius = route.circle[0].radius
      }
    }
    loadComments() {
      const self = this
      wx.cloud.callFunction({
        name: 'loadComments',
        success: res => {
          self.comments = res.result.data.reverse()
          setTimeout(() => {
            self.danmuShow = true
            timer = setInterval(() => {
              self.danmuCounter = self.danmuCounter < self.comments.length - 1 ? self.danmuCounter += 1 : 0
              self.$apply()
            }, 2000)
            self.$apply()
          }, 1000)
          self.$apply()
        }
      })
    }
  }
</script>
